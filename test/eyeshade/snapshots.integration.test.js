import { serial as test } from 'ava'
import _ from 'underscore'
import uuidV4 from 'uuid/v4'
import {
  justDate,
  timeout
} from 'bat-utils/lib/extras-utils'
import { Runtime } from 'bat-utils'
import { updateSnapshotAccounts } from '../../eyeshade/workers/snapshots'
import { insertFromSettlement } from '../../eyeshade/lib/transaction'
import {
  debug,
  agents,
  ok,
  cleanPgDb
} from '../utils'

const {
  BAT_REDIS_URL,
  BAT_POSTGRES_URL,
  TESTING_COHORTS
} = process.env
const runtime = new Runtime({
  testingCohorts: TESTING_COHORTS ? TESTING_COHORTS.split(',') : [],
  queue: BAT_REDIS_URL,
  prometheus: {
    label: 'eyeshade.worker.1'
  },
  currency: {
    url: process.env.BAT_RATIOS_URL || false,
    access_token: process.env.BAT_RATIOS_TOKEN || false
  },
  postgres: {
    roURL: BAT_POSTGRES_URL,
    url: BAT_POSTGRES_URL
  }
})
const docId = {
  toString: () => '5b5e55000000000000000000' // 2018-07-30T00:00:00.000Z
}
docId.toHexString = docId.toString
const ownerId = 'publishers#uuid:' + uuidV4().toLowerCase()
const contributionSettlement = (extras) => Object.assign({
  probi: '9500000000000000000',
  fees: '500000000000000000',
  altcurrency: 'BAT',
  _id: docId,
  type: 'contribution',
  publisher: 'foo.com',
  owner: ownerId,
  settlementId: uuidV4().toLowerCase(),
  address: uuidV4().toLowerCase(),
  amount: '9.5',
  currency: 'BAT'
}, extras)
const referralSettlement = (extras) => Object.assign({
  probi: '10000000000000000000',
  fees: '0',
  altcurrency: 'BAT',
  _id: docId,
  type: 'referral',
  publisher: 'foo.com',
  owner: ownerId,
  settlementId: uuidV4().toLowerCase(),
  address: uuidV4().toLowerCase(),
  amount: '10',
  currency: 'BAT'
}, extras)

test.afterEach.always(cleanPgDb(runtime.postgres))
test('check snapshots auth', async (t) => {
  t.plan(0)
  await createSnapshot({
    expect: 403,
    agent: agents.eyeshade.global
  })
  await createSnapshot({
    expect: ok
  })
})
test('duplicate snapshots id posting conficts', async (t) => {
  t.plan(0)
  const { snapshotId } = await createSnapshot({
    expect: ok
  })
  await createSnapshot({
    snapshotId,
    expect: 409
  })
})
test('snapshots getting statuses', async (t) => {
  t.plan(0)
  const snapshotId = uuidV4().toLowerCase()
  await getSnapshot({
    snapshotId,
    expect: 404
  })
  await createSnapshot({
    snapshotId,
    expect: ok
  })
  await getSnapshot({
    snapshotId,
    expect: 202
  })
  let rows = []
  while (!rows.length) {
    await timeout(1000)
    ;({ rows } = await runtime.postgres.query('select * from payout_reports where completed = true'))
  }
  await getSnapshot({
    snapshotId,
    expect: ok
  })
})
test('snapshots are autogenerated by a daily run handler', async (t) => {
  let snapshot
  const client = await runtime.postgres.connect()
  const date = justDate(new Date())
  try {
    const { snapshotId } = await createSnapshot({
      expect: ok
    })
    snapshot = await updateSnapshotAccounts(debug, runtime, {
      until: date,
      snapshotId
    })
    t.deepEqual({
      id: snapshot.id,
      completed: true
    }, _.pick(snapshot, ['id', 'completed']))

    await insertFromSettlement(runtime, client, contributionSettlement())

    await insertFromSettlement(runtime, client, referralSettlement())

    snapshot = await updateSnapshotAccounts(debug, runtime, {
      until: date,
      snapshotId
    })

    const { rows } = await runtime.postgres.query('select * from balance_snapshots')
    console.log(rows)
    const snapshot1 = await getSnapshot({
      snapshotId: snapshot.id,
      expect: ok,
      account: ['foo.com']
    })
    console.log('final snapshot', snapshot1)
  } catch (e) {
    console.log(e)
    throw e
  }
})

async function getSnapshot ({
  snapshotId,
  agent = agents.eyeshade.publishers,
  expect = ok,
  account = []
}) {
  const id = snapshotId || uuidV4().toLowerCase()
  const url = `/v1/snapshots/${id}`
  const { body } = await agent
    .get(url)
    .query({ account })
    .expect(expect)
  return body
}

async function createSnapshot ({
  snapshotId,
  agent = agents.eyeshade.publishers,
  expect = ok
}) {
  const url = '/v1/snapshots/'
  const payload = {
    snapshotId: snapshotId || uuidV4().toLowerCase()
  }
  const { body } = await agent
    .post(url)
    .send(payload)
    .expect(expect)
  return body
}
